{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\OneDrive\\\\Work\\\\udemy\\\\Maximilian\\\\react\\\\next.js bigger project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetup.image,\n    title: props.meetup.title,\n    address: props.meetup.address,\n    description: props.meetup.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://dnanusevski:djYCU3eAaQnK5SMa@cluster0.ctznz.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const projection = {\n    _id: 1,\n    data: {\n      title: 1\n    }\n  };\n  const meetups = await meetupCollection.find().project(projection).toArray();\n  console.log(\"ID REUSLTS\");\n  console.log(meetups);\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n\n  var ObjectId = require('mongodb').ObjectId;\n\n  const client = await MongoClient.connect(\"mongodb+srv://dnanusevski:djYCU3eAaQnK5SMa@cluster0.ctznz.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  return {\n    props: {\n      meetup: selectedMeetup.data\n    },\n    revalidate: 86400\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["D:/OneDrive/Work/udemy/Maximilian/react/next.js bigger project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","MeetupDetails","props","meetup","image","title","address","description","getStaticPaths","client","connect","db","meetupCollection","collection","projection","_id","data","meetups","find","project","toArray","console","log","close","fallback","paths","map","params","meetupId","toString","getStaticProps","context","ObjectId","require","selectedMeetup","findOne","revalidate"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,MAAN,CAAaC,KADtB;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,MAAN,CAAaE,KAFtB;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,MAAN,CAAaG,OAHxB;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,MAAN,CAAaI;AAJ5B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,2GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMC,UAAU,GAAG;AAAEC,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,IAAI,EAAE;AAACX,MAAAA,KAAK,EAAC;AAAP;AAAhB,GAAnB;AACA,QAAMY,OAAO,GAAG,MAAML,gBAAgB,CAACM,IAAjB,GAAwBC,OAAxB,CAAgCL,UAAhC,EAA4CM,OAA5C,EAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACAR,EAAAA,MAAM,CAACc,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAER,OAAO,CAACS,GAAR,CAAavB,MAAD,KAAa;AAC9BwB,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEzB,MAAM,CAACY,GAAP,CAAWc,QAAX;AADJ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAQD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;;AACA,MAAII,QAAQ,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,QAAlC;;AAEA,QAAMvB,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,2GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMqB,cAAc,GAAG,MAAMtB,gBAAgB,CAC1CuB,OAD0B,CAClB;AAAEpB,IAAAA,GAAG,EAAEiB,QAAQ,CAACJ,QAAD;AAAf,GADkB,CAA7B;AAGA,SAAO;AACL1B,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE+B,cAAc,CAAClB;AADlB,KADF;AAKLoB,IAAAA,UAAU,EAAE;AALP,GAAP;AAOD;AAED,eAAenC,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nconst MeetupDetails = (props) => {\r\n  return (\r\n    <MeetupDetail\r\n      image={props.meetup.image}\r\n      title={props.meetup.title}\r\n      address={props.meetup.address}\r\n      description={props.meetup.description}\r\n    />\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://dnanusevski:djYCU3eAaQnK5SMa@cluster0.ctznz.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n  const projection = { _id: 1, data: {title:1} };\r\n  const meetups = await meetupCollection.find().project(projection).toArray();\r\n  console.log(\"ID REUSLTS\");\r\n  console.log(meetups);\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: {\r\n        meetupId: meetup._id.toString(),\r\n      },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n  var ObjectId = require('mongodb').ObjectId;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://dnanusevski:djYCU3eAaQnK5SMa@cluster0.ctznz.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n  const selectedMeetup = await meetupCollection\r\n    .findOne({ _id: ObjectId(meetupId) });\r\n\r\n  return {\r\n    props: {\r\n      meetup: selectedMeetup.data,\r\n    },\r\n\r\n    revalidate: 86400,\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}